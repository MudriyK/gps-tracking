{"version":3,"file":"static/js/191.a6525299.chunk.js","mappings":"mBAEA,MAAMA,EAAU,CACdC,WAAY,IACZC,QAAS,IACTC,oBAAoB,GCHtB,MAAMC,EAAa,IDMnB,MACEC,WAAAA,GACEC,KAAKC,QAAU,IACjB,CAGAC,aAAAA,CAAcC,EAAiBC,GAGzB,gBAAiBC,UACnBL,KAAKC,QAAUI,UAAUC,YAAYC,eAClCC,IAECL,EAAgBK,EAAS,IAI1BC,IAECL,EAAcK,EAAM,GAEtBf,GAGFgB,QAAQD,MAAM,gDAElB,CAGAE,YAAAA,GACuB,OAAjBX,KAAKC,UACPI,UAAUC,YAAYM,WAAWZ,KAAKC,SACtCD,KAAKC,QAAU,KACfS,QAAQG,IAAI,8BAEhB,GCtCFC,KAAKC,UAAaC,IAChBN,QAAQG,IAAI,mCAAoCG,GAE1B,UAAlBA,EAAEC,KAAKC,OACTpB,EAAWI,eACTiB,UACET,QAAQG,IAAI,aAAcL,GAG1BM,KAAKM,YAAYZ,EAAS,IAE3BC,IACCC,QAAQD,MAAM,mBAAoBA,EAAMY,QAAQ,IAGzB,SAAlBL,EAAEC,KAAKC,QAAqBF,EAAEC,KAAKhB,SAC5CH,EAAWa,cACb,C","sources":["services/GeolocationWatcher.js","serviceWorkers/geoLocationWorker.js"],"sourcesContent":["// import { MOCKED_GPS_DATA } from \"../constants\";\n\nconst options = {\n  maximumAge: 5000, // Accept a cached position whose age is no greater than the specified time in milliseconds\n  timeout: 5000, // The maximum length of time (in milliseconds) the device is allowed to take in order to return a position\n  enableHighAccuracy: true, // Provides a hint that the application needs the best possible results\n};\n\nclass GeolocationWatcher {\n  constructor() {\n    this.watchID = null; // This will hold the ID of the watchPosition call\n  }\n\n  // Method to start watching the position\n  startWatching(successCallback, errorCallback) {\n    // let currentIndex = 0;\n\n    if (\"geolocation\" in navigator) {\n      this.watchID = navigator.geolocation.watchPosition(\n        (position) => {\n          // Call the success callback function with the position object\n          successCallback(position);\n          // successCallback(MOCKED_GPS_DATA[currentIndex]);\n          // currentIndex++;\n        },\n        (error) => {\n          // Call the error callback function with the error object\n          errorCallback(error);\n        },\n        options\n      );\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  // Method to stop watching the position\n  stopWatching() {\n    if (this.watchID !== null) {\n      navigator.geolocation.clearWatch(this.watchID);\n      this.watchID = null; // Reset the watchID after stopping\n      console.log(\"Stopped watching position.\");\n    }\n  }\n}\n\nexport { GeolocationWatcher };\n","import { GeolocationWatcher } from \"../services\";\n\nconst geoWatcher = new GeolocationWatcher();\n\n//eslint-disable-next-line no-restricted-globals\nself.onmessage = (e) => {\n  console.log(\"TestWroker GEO received message \", e);\n  //Start or stop watching location based on the message from the main thread\n  if (e.data.action === \"START\") {\n    geoWatcher.startWatching(\n      async (position) => {\n        console.log(\"Position: \", position);\n\n        // eslint-disable-next-line no-restricted-globals\n        self.postMessage(position);\n      },\n      (error) => {\n        console.error(\"Error occurred: \", error.message);\n      }\n    );\n  } else if (e.data.action === \"STOP\" && e.data.watchID) {\n    geoWatcher.stopWatching();\n  }\n};\n"],"names":["options","maximumAge","timeout","enableHighAccuracy","geoWatcher","constructor","this","watchID","startWatching","successCallback","errorCallback","navigator","geolocation","watchPosition","position","error","console","stopWatching","clearWatch","log","self","onmessage","e","data","action","async","postMessage","message"],"sourceRoot":""}