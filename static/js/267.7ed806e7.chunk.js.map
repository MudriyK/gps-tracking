{"version":3,"file":"static/js/267.7ed806e7.chunk.js","mappings":"AACAA,KAAKC,UAAaC,IAChB,OAAQA,EAAEC,KAAKC,QACb,IAAK,mBAAoB,CACvB,MAAM,IAAEC,EAAG,UAAEC,GAAcJ,EAAEC,KAE7B,IAAII,EAAgB,EACpB,GAAID,EAAUE,OAAS,EAAG,OAAOD,EAEjC,MAAME,EAAUH,EAAUD,KAAIK,IAAA,IAAC,IAAEC,EAAG,IAAEC,GAAKF,EAAA,OAAK,IAAIL,EAAIQ,OAAOF,EAAKC,EAAI,IAExE,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAQD,OAAS,EAAGM,IAOtCP,GALiBF,EAAIU,SAASC,UAAUC,uBACtCR,EAAQK,GACRL,EAAQK,EAAI,IAOhB,OAAOd,KAAKkB,YAAY,CACtBd,OAAQ,wBACRe,MAAOZ,GAEX,CACA,IAAK,cAAe,CAClB,MAAM,IAAEF,EAAG,SAAEe,EAAQ,KAAEC,GAASnB,EAAEC,KAElC,IAAKE,EAAK,OAgBV,OAdIe,GACFA,EAASE,OAAO,WAGA,IAAIjB,EAAIkB,SAAS,CACjCF,OACAG,UAAU,EACVC,YAAa,UACbC,cAAe,EACfC,aAAc,IAGNL,OAAOjB,EAGnB,CACA,IAAK,eAAgB,CACnB,MAAM,IAAEA,EAAG,SAAEuB,GAAa1B,EAAEC,KAEtB0B,EAAS,IAAIxB,EAAIyB,OAAO,CAC5BC,SAAU,CAAEpB,IAAKiB,EAASjB,IAAKC,IAAKgB,EAAShB,KAC7CP,QAGI2B,EAAa,IAAI3B,EAAI4B,WAAW,CACpCC,QAASN,EAASM,UAWpB,YARAL,EAAOM,YAAY,SAAS,KAC1BH,EAAWI,KAAK,CACdC,OAAQR,EACRxB,MACAiC,aAAa,GACb,GAIN,CACA,QACE,OAAO,KAEX","sources":["webWorkers/mapsWorker.js"],"sourcesContent":["//eslint-disable-next-line no-restricted-globals\nself.onmessage = (e) => {\n  switch (e.data.action) {\n    case \"getTotalDistance\": {\n      const { map, routeData } = e.data;\n\n      let totalDistance = 0;\n      if (routeData.length < 2) return totalDistance; // Need at least two points to calculate distance\n\n      const latLngs = routeData.map(({ lat, lng }) => new map.LatLng(lat, lng));\n\n      for (let i = 0; i < latLngs.length - 1; i++) {\n        // Calculate distance between consecutive points\n        const distance = map.geometry.spherical.computeDistanceBetween(\n          latLngs[i],\n          latLngs[i + 1]\n        );\n\n        totalDistance += distance;\n      }\n\n      //eslint-disable-next-line no-restricted-globals\n      return self.postMessage({\n        action: \"computedTotalDistance\",\n        value: totalDistance,\n      });\n    }\n    case \"renderRoute\": {\n      const { map, polyline, path } = e.data;\n\n      if (!map) return;\n\n      if (polyline) {\n        polyline.setMap(null);\n      }\n\n      const routePath = new map.Polyline({\n        path,\n        geodesic: true,\n        strokeColor: \"#FF0000\",\n        strokeOpacity: 1.0,\n        strokeWeight: 2,\n      });\n\n      routePath.setMap(map);\n\n      return;\n    }\n    case \"renderMarker\": {\n      const { map, waypoint } = e.data;\n\n      const marker = new map.Marker({\n        position: { lat: waypoint.lat, lng: waypoint.lng },\n        map,\n      });\n\n      const infoWindow = new map.InfoWindow({\n        content: waypoint.content,\n      });\n\n      marker.addListener(\"click\", () => {\n        infoWindow.open({\n          anchor: marker,\n          map,\n          shouldFocus: false,\n        });\n      });\n\n      return;\n    }\n    default: {\n      return null;\n    }\n  }\n};\n"],"names":["self","onmessage","e","data","action","map","routeData","totalDistance","length","latLngs","_ref","lat","lng","LatLng","i","geometry","spherical","computeDistanceBetween","postMessage","value","polyline","path","setMap","Polyline","geodesic","strokeColor","strokeOpacity","strokeWeight","waypoint","marker","Marker","position","infoWindow","InfoWindow","content","addListener","open","anchor","shouldFocus"],"sourceRoot":""}